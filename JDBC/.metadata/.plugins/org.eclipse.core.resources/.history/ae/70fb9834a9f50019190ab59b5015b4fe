package uo.ri.business.transactionScripts.administrator;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Map;

import alb.util.jdbc.Jdbc;
import uo.ri.business.dto.CourseDto;
import uo.ri.common.BusinessException;
import uo.ri.conf.Factory;
import uo.ri.persistance.training.CourseGateway;
import uo.ri.persistance.vehicle.VehicleTypeGateway;

public class RegisterNewCourse {
	
	private CourseDto dto;
	
	public RegisterNewCourse(CourseDto dto) {
		this.dto = dto;
	}
	public CourseDto execute() {
		try (Connection c = Jdbc.getConnection()){
			c.setAutoCommit(false);
			CourseGateway gateway = Factory.persistance.getCourseGateway();
			gateway.setConnection(c);
			
			if(dto.startDate.after(dto.endDate)) {
				c.rollback();
				throw new BusinessException("Start Date is after End date");
			}
			
			if(dto.endDate.before(dto.startDate)) {
				c.rollback();
				throw new BusinessException("End Date is before Start Date");
			}
			
			if(dto.hours <= 0) {
				c.rollback();
				throw new BusinessException("The number of hours are zero or negative");
			}
			
			if(dto.code.length() == 0 || dto.name.length() == 0 || dto.description.length() == 0 || dto.startDate == null || dto.endDate == null || dto.hours <= 0) {
				c.rollback();
				throw new BusinessException("Some value is empty");
			}
			
			CourseDto aux = gateway.findCourseByID(dto.id);
			if(aux.name.equals(dto.name)) {
				c.rollback();
				throw new BusinessException("A Course with the same name already exists");
			}
			
			if(dto.percentages.size() == 0) {
				c.rollback();
				throw new BusinessException("There are no dedications specified");
			}
			VehicleTypeGateway gateVehicleTypeGateway = Factory.persistance.getVehicleTypeGateway();
			gateVehicleTypeGateway.setConnection(c);
			int sumDedications = 0;
			for (Map.Entry<Long, Integer>  entry : dto.percentages.entrySet()) {
				sumDedications += entry.getValue();
			    if(entry.getValue() <= 0 ||  entry.getValue() == null) {
			    	c.rollback();
					throw new BusinessException("The are any dedication with an invalid percentage (empty, zero, negative)");
			    }
			    if(gateVehicleTypeGateway.findVehicleTypeById(entry.getKey()) == null) {
			    	c.rollback();
					throw new BusinessException("There is percentage devoted to a non existing vehicle type");
			    }
			}
			
			if(sumDedications != 100) {
				c.rollback();
				throw new BusinessException("The sum of devoted percentages does not equals 100%");
			}
			
			for (Map.Entry<Long, Integer>  entry : dto.percentages.entrySet()) {
				
			}
			
			gateway.save(workOrderDto);
			c.commit();
			this.workOrderDto.id = gateway.findLastWorkOrder();
			return this.workOrderDto;
		} catch (SQLException e) {
			throw new RuntimeException("ERROR");
		}
		
	}

}
